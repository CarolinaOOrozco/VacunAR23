/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import AccesoDatos.*;
import entidades.*;
import java.awt.Color;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carol
 */
public class ConfirmarCitas extends javax.swing.JInternalFrame {

    DefaultTableModel modelo =new DefaultTableModel();
    private List <CitaVacunacion> citasVencidasMes;
    private List<CitaVacunacion> citasVencidas;
    private CitaVacunacionData cvd;
    private List<CitaVacunacion> citasPorCentro;
    private String centroVacunatorio;
    
    public boolean inCellEditable(int fila,int columna){
        if(columna<=4){
            return false;
        }else
            return true;
    }
    /**
     * Creates new form ConfirmarCitas
     */
    public ConfirmarCitas() {
        initComponents();
        centroVacunatorio=null;
        citasPorCentro=new ArrayList();
        cvd=new CitaVacunacionData();
        //citasVencidasMes=cvd.citasVencidasPorMes(LocalDate.now().getMonthValue());
        //citasVencidas=cargarCitasVencidas();
        cargarCabecera();
        cargarComboBox();
        //jBReasignarCitasVencidas.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaCitas = new javax.swing.JTable();
        jBConfirmarCita = new javax.swing.JButton();
        jBReasignarCitasVencidas = new javax.swing.JButton();
        jLCitasVencidas = new javax.swing.JLabel();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CITAS DE HOY");

        jComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Centro de vacunaci√≥n");

        jTablaCitas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTablaCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaCitasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablaCitas);

        jBConfirmarCita.setBackground(new java.awt.Color(0, 153, 255));
        jBConfirmarCita.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBConfirmarCita.setForeground(new java.awt.Color(255, 255, 255));
        jBConfirmarCita.setText("Confimar como concretada");
        jBConfirmarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConfirmarCitaActionPerformed(evt);
            }
        });

        jBReasignarCitasVencidas.setBackground(new java.awt.Color(0, 153, 255));
        jBReasignarCitasVencidas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBReasignarCitasVencidas.setForeground(new java.awt.Color(255, 255, 255));
        jBReasignarCitasVencidas.setText("Reasignar citas vencidas");
        jBReasignarCitasVencidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBReasignarCitasVencidasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLCitasVencidas, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 54, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(273, 273, 273))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jBConfirmarCita)
                                .addGap(202, 202, 202))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBReasignarCitasVencidas)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(jBConfirmarCita)
                .addGap(1, 1, 1)
                .addComponent(jBReasignarCitasVencidas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLCitasVencidas, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTablaCitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaCitasMouseClicked
        //if(jTablaCitas.getValueAt(jTablaCitas.getSelectedRow(), 6).equals(null)){
            
        //}
        jBConfirmarCita.setEnabled(true);
    }//GEN-LAST:event_jTablaCitasMouseClicked

    private void jBConfirmarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConfirmarCitaActionPerformed
        
        int fila=jTablaCitas.getSelectedRow();
        if(fila==-1){
            JOptionPane.showMessageDialog(this, "Seleccione una cita");
            return;
        }else if(!jTablaCitas.getValueAt(fila, 5).equals(0)){
            JOptionPane.showMessageDialog(this, "La cita seleccionada ya fue concretada");
            return;
        }
        VacunaData vd=new VacunaData();
        Vacuna v=(Vacuna)vd.vacunasDisponibles().get(0);
        CitaVacunacionData cvd=new CitaVacunacionData();
        CiudadanoData cd=new CiudadanoData();
        jTablaCitas.setValueAt(v.getNroSerieDosis(), fila,5);
        Integer codigo=(Integer)jTablaCitas.getValueAt(fila, 4);
        LocalDateTime fechaHora=(LocalDateTime)jTablaCitas.getValueAt(fila, 2);
        cvd.citaVacunacionConcretada(codigo,fechaHora, v);
        vd.marcarComoAplicada(v.getNroSerieDosis());
        if(jTablaCitas.getValueAt(fila, 6).equals(1)){
            
            Ciudadano c=cd.buscarPorDni((int)jTablaCitas.getValueAt(fila, 1));
            LocalDateTime t=cvd.turnoPara4semanas();
            String centroV=(String)jComboBox.getSelectedItem();
            CitaVacunacion cv=new CitaVacunacion(c,2,t,centroV,false);
            cvd.nuevaCita(cv);
        }else if(jTablaCitas.getValueAt(fila, 6).equals(2)){
            
            Ciudadano c=cd.buscarPorDni((int)jTablaCitas.getValueAt(fila, 1));
            LocalDateTime t=cvd.turnoPara4semanas();
            String centroV=(String)jComboBox.getSelectedItem();
            CitaVacunacion cv=new CitaVacunacion(c,3,t,centroV,false);
            cvd.nuevaCita(cv);
        }
        //jBConfirmarCita.setEnabled(false);
    }//GEN-LAST:event_jBConfirmarCitaActionPerformed

    private void jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxActionPerformed
        borrarFilas();
        centroVacunatorio=(String)jComboBox.getSelectedItem();
        citasVencidasMes=cvd.citasVencidasPorMes(LocalDate.now().getMonthValue());
        citasVencidas=cargarCitasVencidas();
        CitaVacunacionData cvd=new CitaVacunacionData();
        ArrayList <CitaVacunacion> vacunacionesHoy=cvd.vacunacionesDiarias(centroVacunatorio,LocalDate.now());
        for(CitaVacunacion cv:vacunacionesHoy){
            modelo.addRow(new Object[]{cv.getCiudadano().getNombreCompleto(),cv.getCiudadano().getDni(),cv.getFechaHoraCita(),cv.getCentroVacunacion(),cv.getCodigoCita(),cv.getVacuna().getNroSerieDosis(),cv.getCodRefuerzo()});
        }
        
        filtrarVencidas();
    }//GEN-LAST:event_jComboBoxActionPerformed

    private void jBReasignarCitasVencidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBReasignarCitasVencidasActionPerformed
        //CitaVacunacionData cvd=new CitaVacunacionData();
        LocalDateTime turno;
        for(CitaVacunacion cv:citasPorCentro){
            if(cv.getCiudadano().getPatologia().equalsIgnoreCase("NINGUNO")||cv.getCiudadano().getAmbitoTrabajo().equalsIgnoreCase("OTRO")){
                turno=(cvd.turnoPara4semanas().minusDays(1));
            }else{
                turno=(cvd.turnoPara2semanas().minusDays(1));
            }
            CitaVacunacion c=new CitaVacunacion(cv.getCiudadano(),cv.getCodRefuerzo(),turno,cv.getCentroVacunacion(),false);
            cvd.nuevaCita(c);
            citasVencidas.remove(c);
        }
        jBReasignarCitasVencidas.setEnabled(false);
        Color color=new Color(0,153,51);
        jLCitasVencidas.setForeground(color);
        jLCitasVencidas.setText("No hay citas pendientes a reasignar del d√≠a de ayer");
        jLCitasVencidas.setVisible(true);
        citasPorCentro=new ArrayList();
    }//GEN-LAST:event_jBReasignarCitasVencidasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBConfirmarCita;
    private javax.swing.JButton jBReasignarCitasVencidas;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JLabel jLCitasVencidas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablaCitas;
    // End of variables declaration//GEN-END:variables

    public void cargarCabecera(){
        modelo.addColumn("Nombre y apellido");
        modelo.addColumn("DNI");
        modelo.addColumn("Fecha-hora");
        modelo.addColumn("Centro de vacunaci√≥n");
        modelo.addColumn("C√≥digo cita");
        modelo.addColumn("Vacuna-N¬∞ de serie");
        modelo.addColumn("C√≥digo de refuerzo");
        jTablaCitas.setModel(modelo);
    }
    
    private void borrarFilas(){
        int f=jTablaCitas.getRowCount()-1;      
        for(;f>=0;f--){
            modelo.removeRow(f);
        }
    }
    
    public void cargarComboBox(){
        jComboBox.addItem("Hospital del Norte");
        jComboBox.addItem("Hospital del Oeste Dr. Atilio Luchini");
        jComboBox.addItem("Hospital del Sur");
        jComboBox.addItem("Hospital Ram√≥n Carrillo");
        jComboBox.addItem("Policlinico");
    }
    
    public List cargarCitasVencidas(){
        List <CitaVacunacion> citas=new ArrayList();
        
        for(CitaVacunacion cv:citasVencidasMes){
            if(cv.getFechaHoraCita().toLocalDate().equals(LocalDate.now().minusDays(1))){
               citas.add(cv);
            }  
        }
        //JOptionPane.showMessageDialog(this, "citas "+citas.size());
        List<CitaVacunacion>copiaCitasVencidas=new ArrayList();
        for(CitaVacunacion cv:citas){
            ArrayList<CitaVacunacion>citasPorPersona=cvd.citasPorPersona(cv.getCiudadano().getDni());
            int i=citasPorPersona.size()-1;
            CitaVacunacion ultimaCita=citasPorPersona.get(i);
            if(cv.getFechaHoraCita().equals(ultimaCita.getFechaHoraCita())){
                
                copiaCitasVencidas.add(cv);
            }
                
        }
            //JOptionPane.showMessageDialog(this, "copiaCitasVencidas "+copiaCitasVencidas.size());
            //citas=citasVencidas;
        //JOptionPane.showMessageDialog(this, "citasVencidasTotales "+copiaCitasVencidas.size());
        return copiaCitasVencidas;
    }
    
    public void filtrarVencidas(){
        List <CitaVacunacion>cpc=new ArrayList();
        for(CitaVacunacion cv:citasVencidas){
            
            if(cv.getCentroVacunacion().equalsIgnoreCase(centroVacunatorio)){
                cpc.add(cv);
            }
            
            citasPorCentro=cpc;
        }
        
        if(citasPorCentro.isEmpty()){
            jBReasignarCitasVencidas.setEnabled(false);
            Color color=new Color(0,153,51);
            jLCitasVencidas.setForeground(color);
            jLCitasVencidas.setText("No hay citas pendientes a reasignar del d√≠a de ayer");
            jLCitasVencidas.setVisible(true);
        }else{
            jBReasignarCitasVencidas.setEnabled(true);
            Color color=new Color(255,0,51);
            jLCitasVencidas.setForeground(color);
            jLCitasVencidas.setText("Hay citas vencidas pendientes a reasignar del d√≠a de ayer");
            jLCitasVencidas.setVisible(true);

            
        }
       
    }
}
